import 'dart:convert';
import 'package:crtd_assignment/services/service.dart';
import 'package:crtd_assignment/views/utils/form_field.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:crtd_assignment/controllers/email_provider.dart';
import 'package:crtd_assignment/controllers/name_provider.dart';
import 'package:crtd_assignment/model/error_model.dart';
import 'package:crtd_assignment/views/utils/navigator.dart';

class RegisterForm extends ConsumerStatefulWidget {
  const RegisterForm({super.key});

  @override
  RegisterFormState createState() => RegisterFormState();
}

class RegisterFormState extends ConsumerState<RegisterForm> {
  final _formKey = GlobalKey<FormState>();

  final TextEditingController fullNameController = TextEditingController();
  final TextEditingController fatherNameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController phoneNumberController = TextEditingController();
  final TextEditingController whatsappNumberController =
      TextEditingController();
  final TextEditingController collegeStateController = TextEditingController();
  final TextEditingController birthPlaceController = TextEditingController();
  final TextEditingController collegeNameController = TextEditingController();
  final TextEditingController branchNameController = TextEditingController();
  final TextEditingController degreeNameController = TextEditingController();
  final TextEditingController passingYearController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController otpController = TextEditingController();
  final TextEditingController dateController = TextEditingController();

  String paymentStatus = 'Not Enroll';
  String gender = 'Male';
  bool verified = false;



  Future<void> _submitForm(BuildContext context) async {
    var formData = {
      'date_of_birth': dateController.text,
      'otp': int.tryParse(otpController.text) ?? 100000,
      'full_name': fullNameController.text,
      'father_name': fatherNameController.text,
      'email': emailController.text,
      'gender': gender,
      'phone_number': phoneNumberController.text,
      'whatsapp_number': whatsappNumberController.text,
      'college_state': collegeStateController.text,
      'birth_place': birthPlaceController.text,
      'college_name': collegeNameController.text,
      'branch_name': branchNameController.text,
      'degree_name': degreeNameController.text,
      'passing_year': int.tryParse(passingYearController.text),
      'password': passwordController.text,
    };

    final registrationService = UserService();
    var response = await registrationService.registerUser(formData);

    ref.read(nameprovider.notifier).add(fullNameController.text);
    ref.read(emailprovider.notifier).add(emailController.text);

    if (response.statusCode == 201) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Registration successful")),
      );
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => const NavigatorBar()),
      );
    } else if (response.statusCode == 400) {
      try {
        var responseBody = jsonDecode(response.body);
        var errorResponse = Autogenerated.fromJson(responseBody);

        if (errorResponse.errors != null) {
          errorResponse.errors!.forEach((field, errorDetails) {
            for (var detail in errorDetails) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('$field: ${detail.string ?? 'Unknown error'}'),
                ),
              );
            }
          });
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text("An unknown error occurred.")),
          );
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Error parsing response: $e")),
        );
        print(e);
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              "Registration failed with status code: ${response.statusCode}"),
        ),
      );
      print('Response body: ${response.body}');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Register Form'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: <Widget>[
              FormFieldWidget(
                controller: fullNameController,
                label: 'Full Name',
              ),
              FormFieldWidget(
                controller: fatherNameController,
                label: 'Father Name',
              ),
              FormFieldWidget(
                controller: emailController,
                label: 'Email',
                isDateField: false,
              ),
              FormFieldWidget(
                controller: dateController,
                label: 'Date of Birth',
                isDateField: true,
              ),
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: DropdownButtonFormField<String>(
                  value: gender,
                  decoration: InputDecoration(
                    labelText: 'Gender',
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(25)),
                  ),
                  items: const [
                    DropdownMenuItem(value: 'Male', child: Text('Male')),
                    DropdownMenuItem(value: 'Female', child: Text('Female')),
                    DropdownMenuItem(value: 'Other', child: Text('Other')),
                  ],
                  onChanged: (newValue) {
                    setState(() {
                      gender = newValue!;
                    });
                  },
                ),
              ),
              FormFieldWidget(
                controller: phoneNumberController,
                label: 'Phone Number',
                isDateField: false,
              ),
              FormFieldWidget(
                controller: whatsappNumberController,
                label: 'WhatsApp Number',
                isDateField: false,
              ),
              FormFieldWidget(
                controller: collegeStateController,
                label: 'College State',
              ),
              FormFieldWidget(
                controller: birthPlaceController,
                label: 'Birth Place',
              ),
              FormFieldWidget(
                controller: collegeNameController,
                label: 'College Name',
              ),
              FormFieldWidget(
                controller: branchNameController,
                label: 'Branch Name',
              ),
              FormFieldWidget(
                controller: degreeNameController,
                label: 'Degree Name',
              ),
              FormFieldWidget(
                controller: passingYearController,
                label: 'Passing Year',
                isDateField: false,
              ),
              FormFieldWidget(
                controller: passwordController,
                label: 'Password',
                isDateField: false,
              ),
              FormFieldWidget(
                controller: otpController,
                label: 'OTP',
                isDateField: false,
                isRequired: false,
              ),
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: DropdownButtonFormField<String>(
                  value: paymentStatus,
                  decoration: InputDecoration(
                    labelText: 'Payment Status',
                    border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(25)),
                  ),
                  items: const [
                    DropdownMenuItem(
                        value: 'Not Enroll', child: Text('Not Enroll')),
                    DropdownMenuItem(
                        value: 'Enroll Pending', child: Text('Enroll Pending')),
                    DropdownMenuItem(
                        value: 'Enrolled', child: Text('Enrolled')),
                  ],
                  onChanged: (newValue) {
                    setState(() {
                      paymentStatus = newValue!;
                    });
                  },
                ),
              ),
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: CheckboxListTile(
                  title: const Text('Verified'),
                  value: verified,
                  onChanged: (bool? value) {
                    setState(() {
                      verified = value ?? false;
                    });
                  },
                ),
              ),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState?.validate() ?? false) {
                    _submitForm(context);
                  }
                },
                child: const Text('Register'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
